basePath: /api/v1
definitions:
  model.AuthUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      price:
        type: number
      title:
        type: string
    type: object
  model.PasswordReq:
    properties:
      old_password:
        type: string
      password:
        type: string
    type: object
  model.Transaction:
    properties:
      ID:
        type: integer
      amount:
        type: number
      book_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      user_id:
        type: integer
    type: object
  model.TransactionReq:
    properties:
      amount:
        type: number
      book_id:
        type: integer
    type: object
  model.User:
    properties:
      ID:
        type: integer
      balance:
        type: number
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      photo_URL:
        type: string
      username:
        type: string
    type: object
  model.UserBorrow:
    properties:
      books:
        items:
          $ref: '#/definitions/model.Book'
        type: array
      user:
        $ref: '#/definitions/model.User'
    type: object
host: localhost:8000
info:
  contact:
    email: alibi.zhumagaliyev@gmail.com
    name: Alibi Zhumagaliyev
    url: '@AZhumagaliyev'
  description: This is a sample server for homework demo server.
  title: OneLab Homework API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Auth get JWT token
      operationId: AuthUser
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.AuthUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Auth get JWT token
      tags:
      - user
  /getHasBookUsers:
    get:
      consumes:
      - application/json
      description: Get not Returned books for user
      operationId: Get not Returned books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserBorrow'
            type: array
      summary: Get not Returned books for user
      tags:
      - borrow
  /getLastMonthly:
    get:
      consumes:
      - application/json
      description: Get Books borrowed last month
      operationId: Get Books borrowed last month
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserBorrow'
            type: array
      summary: Get Books borrowed last month
      tags:
      - borrow
  /transaction:
    delete:
      consumes:
      - application/json
      description: Cancel Transaction
      operationId: CamcelTransaction
      parameters:
      - description: Входящие данные
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Cancel Transaction
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: Create Transaction
      operationId: CreateTransaction
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.TransactionReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Transaction'
      security:
      - ApiKeyAuth: []
      summary: Create Transaction
      tags:
      - transaction
  /user:
    get:
      consumes:
      - application/json
      description: Get User
      operationId: GetUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Get User
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Создание пользователя
      operationId: CreateUser
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Создание пользователя
      tags:
      - user
  /user/password:
    post:
      consumes:
      - application/json
      description: Change Passowrd for user
      operationId: ChangePassword
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.PasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Change Password for user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: OAuth protects our entity endpoints
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
