// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/manager.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jumagaliev1/one_edu/internal/model"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockIUserService) Auth(ctx context.Context, user model.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockIUserServiceMockRecorder) Auth(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIUserService)(nil).Auth), ctx, user)
}

// ChangePassword mocks base method.
func (m *MockIUserService) ChangePassword(ctx context.Context, body model.PasswordReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIUserServiceMockRecorder) ChangePassword(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIUserService)(nil).ChangePassword), ctx, body)
}

// CheckPassword mocks base method.
func (m *MockIUserService) CheckPassword(encPass, providedPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", encPass, providedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockIUserServiceMockRecorder) CheckPassword(encPass, providedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockIUserService)(nil).CheckPassword), encPass, providedPassword)
}

// Create mocks base method.
func (m *MockIUserService) Create(ctx context.Context, user model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserServiceMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserService)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockIUserService) Delete(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserServiceMockRecorder) Delete(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserService)(nil).Delete), ctx, ID)
}

// GenerateToken mocks base method.
func (m *MockIUserService) GenerateToken(user model.AuthUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIUserServiceMockRecorder) GenerateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIUserService)(nil).GenerateToken), user)
}

// GetAll mocks base method.
func (m *MockIUserService) GetAll(ctx context.Context) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUserServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUserService)(nil).GetAll), ctx)
}

// GetByUsername mocks base method.
func (m *MockIUserService) GetByUsername(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockIUserServiceMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockIUserService)(nil).GetByUsername), ctx, username)
}

// GetUserFromRequest mocks base method.
func (m *MockIUserService) GetUserFromRequest(ctx context.Context) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromRequest", ctx)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromRequest indicates an expected call of GetUserFromRequest.
func (mr *MockIUserServiceMockRecorder) GetUserFromRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromRequest", reflect.TypeOf((*MockIUserService)(nil).GetUserFromRequest), ctx)
}

// HashPassword mocks base method.
func (m *MockIUserService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIUserServiceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIUserService)(nil).HashPassword), password)
}

// ParseToken mocks base method.
func (m *MockIUserService) ParseToken(accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockIUserServiceMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockIUserService)(nil).ParseToken), accessToken)
}

// RefreshToken mocks base method.
func (m *MockIUserService) RefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIUserServiceMockRecorder) RefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIUserService)(nil).RefreshToken))
}

// Update mocks base method.
func (m *MockIUserService) Update(ctx context.Context, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserServiceMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserService)(nil).Update), ctx, user)
}

// MockIBookService is a mock of IBookService interface.
type MockIBookService struct {
	ctrl     *gomock.Controller
	recorder *MockIBookServiceMockRecorder
}

// MockIBookServiceMockRecorder is the mock recorder for MockIBookService.
type MockIBookServiceMockRecorder struct {
	mock *MockIBookService
}

// NewMockIBookService creates a new mock instance.
func NewMockIBookService(ctrl *gomock.Controller) *MockIBookService {
	mock := &MockIBookService{ctrl: ctrl}
	mock.recorder = &MockIBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookService) EXPECT() *MockIBookServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBookService) Create(ctx context.Context, book model.Book) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, book)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBookServiceMockRecorder) Create(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBookService)(nil).Create), ctx, book)
}

// GetByTitle mocks base method.
func (m *MockIBookService) GetByTitle(ctx context.Context, title string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", ctx, title)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockIBookServiceMockRecorder) GetByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockIBookService)(nil).GetByTitle), ctx, title)
}

// MockIBorrowService is a mock of IBorrowService interface.
type MockIBorrowService struct {
	ctrl     *gomock.Controller
	recorder *MockIBorrowServiceMockRecorder
}

// MockIBorrowServiceMockRecorder is the mock recorder for MockIBorrowService.
type MockIBorrowServiceMockRecorder struct {
	mock *MockIBorrowService
}

// NewMockIBorrowService creates a new mock instance.
func NewMockIBorrowService(ctrl *gomock.Controller) *MockIBorrowService {
	mock := &MockIBorrowService{ctrl: ctrl}
	mock.recorder = &MockIBorrowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBorrowService) EXPECT() *MockIBorrowServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBorrowService) Create(ctx context.Context, borrow model.Borrow) (*model.Borrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, borrow)
	ret0, _ := ret[0].(*model.Borrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBorrowServiceMockRecorder) Create(ctx, borrow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBorrowService)(nil).Create), ctx, borrow)
}

// GetAll mocks base method.
func (m *MockIBorrowService) GetAll(ctx context.Context) ([]model.Borrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Borrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIBorrowServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIBorrowService)(nil).GetAll), ctx)
}

// GetNoReturned mocks base method.
func (m *MockIBorrowService) GetNoReturned(ctx context.Context) ([]model.Borrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoReturned", ctx)
	ret0, _ := ret[0].([]model.Borrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoReturned indicates an expected call of GetNoReturned.
func (mr *MockIBorrowServiceMockRecorder) GetNoReturned(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoReturned", reflect.TypeOf((*MockIBorrowService)(nil).GetNoReturned), ctx)
}

// MockIUserBorrowService is a mock of IUserBorrowService interface.
type MockIUserBorrowService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserBorrowServiceMockRecorder
}

// MockIUserBorrowServiceMockRecorder is the mock recorder for MockIUserBorrowService.
type MockIUserBorrowServiceMockRecorder struct {
	mock *MockIUserBorrowService
}

// NewMockIUserBorrowService creates a new mock instance.
func NewMockIUserBorrowService(ctrl *gomock.Controller) *MockIUserBorrowService {
	mock := &MockIUserBorrowService{ctrl: ctrl}
	mock.recorder = &MockIUserBorrowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserBorrowService) EXPECT() *MockIUserBorrowServiceMockRecorder {
	return m.recorder
}

// GetCurrentHaveBooks mocks base method.
func (m *MockIUserBorrowService) GetCurrentHaveBooks(ctx context.Context) ([]model.UserBorrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHaveBooks", ctx)
	ret0, _ := ret[0].([]model.UserBorrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentHaveBooks indicates an expected call of GetCurrentHaveBooks.
func (mr *MockIUserBorrowServiceMockRecorder) GetCurrentHaveBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHaveBooks", reflect.TypeOf((*MockIUserBorrowService)(nil).GetCurrentHaveBooks), ctx)
}

// GetUserBookLastMonthly mocks base method.
func (m *MockIUserBorrowService) GetUserBookLastMonthly(ctx context.Context) ([]model.UserBorrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBookLastMonthly", ctx)
	ret0, _ := ret[0].([]model.UserBorrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBookLastMonthly indicates an expected call of GetUserBookLastMonthly.
func (mr *MockIUserBorrowServiceMockRecorder) GetUserBookLastMonthly(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBookLastMonthly", reflect.TypeOf((*MockIUserBorrowService)(nil).GetUserBookLastMonthly), ctx)
}

// MockITransactionService is a mock of ITransactionService interface.
type MockITransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionServiceMockRecorder
}

// MockITransactionServiceMockRecorder is the mock recorder for MockITransactionService.
type MockITransactionServiceMockRecorder struct {
	mock *MockITransactionService
}

// NewMockITransactionService creates a new mock instance.
func NewMockITransactionService(ctrl *gomock.Controller) *MockITransactionService {
	mock := &MockITransactionService{ctrl: ctrl}
	mock.recorder = &MockITransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionService) EXPECT() *MockITransactionServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockITransactionService) Cancel(ctx context.Context, transactionID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockITransactionServiceMockRecorder) Cancel(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockITransactionService)(nil).Cancel), ctx, transactionID)
}

// Create mocks base method.
func (m *MockITransactionService) Create(ctx context.Context, transaction model.Transaction) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transaction)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITransactionServiceMockRecorder) Create(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionService)(nil).Create), ctx, transaction)
}
